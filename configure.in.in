#MIN_CONFIG
	
AM_INIT_AUTOMAKE(pinentry,0.1)

AC_PATH_PROG(SETCAP, setcap, no, "$PATH:/sbin:/usr/sbin")
AC_CHECK_LIB(cap, cap_set_proc, [
  AC_DEFINE(USE_CAPABILITIES)
  LIBCAP=-lcap
])
AC_SUBST(LIBCAP)


dnl Check for assuan library
AC_DEFUN(AC_PATH_ASSUAN,
[
	LIBASSUAN="-lassuan"
	AC_MSG_CHECKING([for assuan])
	ac_assuan_includes=NO
	ac_assuan_libraries=NO
	assuan_libraries=""
	assuan_includes=""
	AC_ARG_WITH(assuan-dir,
		[  --with-assuan-dir=DIR   path to assuan lib and include files],
		[  ac_assuan_includes="$withval"
	   	   ac_assuan_libraries="$withval"
		])
	assuan_incdirs="$ac_assuan_includes /usr/include /usr/local/include /opt/include $prefix/include"
	AC_FIND_FILE(assuan.h,$assuan_incdirs,assuan_incdir)
	ac_assuan_includes="$assuan_incdir"

	assuan_libdirs="/usr/lib /usr/local/lib /opt/lib $prefix/lib"
	if test ! "$ac_assuan_libraries" = "NO" ; then
		assuan_libdirs="$ac_assuan_libraries $assuan_libdirs"
	fi
	assuan_libdir=NONE
	save_cflags="$CFLAGS"
	CFLAGS="-I$ac_assuan_includes $CFLAGS"
	for dir in $assuan_libdirs; do
		save_ldflags="$LDFLAGS"
		LDFLAGS="-L$dir $LDFLAGS"
		AC_TRY_LINK([
		#include <stdio.h> 
		#include <assuan.h>],,[ assuan_libdir=$dir; break; ])
		LDFLAGS="$save_ldflags"
	done
	LDFLAGS="$save_ldflags"
	CFLAGS="$save_cflags"
	
	ac_assuan_libraries="$assuan_libdir"

	if test "$ac_assuan_includes" = "NO" || test "$ac_assuan_libraries" = "NO"; then
		AC_MSG_RESULT([Could not find assuan.
	Please use --with-assuan-dir=DIR to point configure to the assuan library.])
		exit -1
	else
	    ASSUAN_INCLUDES="-I$ac_assuan_includes "
	    ASSUAN_LDFLAGS="-L$ac_assuan_libraries -lassuan"
	fi
	AC_MSG_RESULT([yes])

AC_SUBST(ASSUAN_INCLUDES)
AC_SUBST(ASSUAN_LDFLAGS)
AC_SUBST(LIBASSUAN)
])

AC_PATH_ASSUAN

AC_CHECK_FUNCS(getdelim seteuid strsignal vsnprintf)
AC_REPLACE_FUNCS(asprintf getline setenv strdup)

dnl this one stolen from GnuPG
######################################################################
# Check whether mlock is broken (hpux 10.20 raises a SIGBUS if mlock
# is not called from uid 0 (not tested whether uid 0 works)
######################################################################
dnl GNUPG_CHECK_MLOCK
dnl
AC_DEFUN(GNUPG_CHECK_MLOCK,
  [ AC_CHECK_FUNCS(mlock)
    if test "$ac_cv_func_mlock" = "yes"; then
        AC_MSG_CHECKING(whether mlock is broken)
          AC_CACHE_VAL(gnupg_cv_have_broken_mlock,
             AC_TRY_RUN([
                #include <stdlib.h>
                #include <unistd.h>
                #include <errno.h>
                #include <sys/mman.h>
                #include <sys/types.h>
                #include <fcntl.h>
 
                int main()
                {
                    char *pool;
                    int err;
                    long int pgsize = getpagesize();
 
                    pool = malloc( 4096 + pgsize );
                    if( !pool )
                        return 2;
                    pool += (pgsize - ((long int)pool % pgsize));
 
                    err = mlock( pool, 4096 );
                    if( !err || errno == EPERM )
                        return 0; /* okay */
 
                    return 1;  /* hmmm */
                }
 
            ],
            gnupg_cv_have_broken_mlock="no",
            gnupg_cv_have_broken_mlock="yes",
            gnupg_cv_have_broken_mlock="assume-no"
           )
         )
         if test "$gnupg_cv_have_broken_mlock" = "yes"; then
             AC_DEFINE(HAVE_BROKEN_MLOCK)
             AC_MSG_RESULT(yes)
         else
            if test "$gnupg_cv_have_broken_mlock" = "no"; then
                AC_MSG_RESULT(no)
            else
                AC_MSG_RESULT(assuming no)
            fi
         fi
    fi
  ])

GNUPG_CHECK_MLOCK

